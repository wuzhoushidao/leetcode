给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ln=new ListNode(0);
        if(l1->next!=NULL&&l2->next!=NULL){
            int tempVal=l1->val+l2->val;
            int uVal=tempVal%10;
            int dVal=tempVal/10;
            ln->val=uVal;
            l1->next->val=l1->next->val+dVal;
            ln->next=addTwoNumbers(l1->next,l2->next);
            return ln; }else if(l1->next==NULL){
            if(l2->next==NULL){
                 int tempVal=l1->val+l2->val;
                 int uVal=tempVal%10;
                 int dVal=tempVal/10;
                 ln->val=uVal;
                 if(dVal>0){
                     ListNode* nextln=new ListNode(0);
                     nextln->val=dVal;
                     ln->next=nextln;
                 }
                 return ln;
            }else{
                 int tempVal=l1->val+l2->val;
                 int uVal=tempVal%10;
                 int dVal=tempVal/10;
                 ln->val=uVal;
                 ln->next=l2->next;
                 if(dVal>0){
                    listNodeAdd(l2->next);
                 }
                 return ln;
            } }else{
                int tempVal=l1->val+l2->val;
                 int uVal=tempVal%10;
                 int dVal=tempVal/10;
                 ln->val=uVal;
                 ln->next=l1->next;
                 if(dVal>0){
                    listNodeAdd(l1->next);
                 }
                 return ln;
        }
        
        
    }void listNodeAdd(ListNode* l1){
       int tempVal=l1->val+1;
        if(tempVal>9&&l1->next!=NULL){
            l1->val=0;
            listNodeAdd(l1->next);
        }else if(tempVal<10){
            l1->val=tempVal;
        }else{
            l1->val=0;
            ListNode* ln=new ListNode(0);
            ln->val=1;
            l1->next=ln;
        }
    }
};


官网解答：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode pre = new ListNode(0);
        ListNode cur = pre;
        int carry = 0;
        while(l1 != null || l2 != null) {
            int x = l1 == null ? 0 : l1.val;
            int y = l2 == null ? 0 : l2.val;
            int sum = x + y + carry;
            
            carry = sum / 10;
            sum = sum % 10;
            cur.next = new ListNode(sum);

   cur = cur.next;
            if(l1 != null)
                l1 = l1.next;
            if(l2 != null)
                l2 = l2.next;
        }
        if(carry == 1) {
            cur.next = new ListNode(carry);
        }
        return pre.next;
    }
}
